// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "cceip_kernel.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic cceip_kernel::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic cceip_kernel::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<18> cceip_kernel::ap_ST_fsm_state1 = "1";
const sc_lv<18> cceip_kernel::ap_ST_fsm_state2 = "10";
const sc_lv<18> cceip_kernel::ap_ST_fsm_state3 = "100";
const sc_lv<18> cceip_kernel::ap_ST_fsm_state4 = "1000";
const sc_lv<18> cceip_kernel::ap_ST_fsm_state5 = "10000";
const sc_lv<18> cceip_kernel::ap_ST_fsm_state6 = "100000";
const sc_lv<18> cceip_kernel::ap_ST_fsm_state7 = "1000000";
const sc_lv<18> cceip_kernel::ap_ST_fsm_state8 = "10000000";
const sc_lv<18> cceip_kernel::ap_ST_fsm_pp0_stage0 = "100000000";
const sc_lv<18> cceip_kernel::ap_ST_fsm_state12 = "1000000000";
const sc_lv<18> cceip_kernel::ap_ST_fsm_pp1_stage0 = "10000000000";
const sc_lv<18> cceip_kernel::ap_ST_fsm_state15 = "100000000000";
const sc_lv<18> cceip_kernel::ap_ST_fsm_pp2_stage0 = "1000000000000";
const sc_lv<18> cceip_kernel::ap_ST_fsm_state19 = "10000000000000";
const sc_lv<18> cceip_kernel::ap_ST_fsm_state20 = "100000000000000";
const sc_lv<18> cceip_kernel::ap_ST_fsm_state21 = "1000000000000000";
const sc_lv<18> cceip_kernel::ap_ST_fsm_state22 = "10000000000000000";
const sc_lv<18> cceip_kernel::ap_ST_fsm_state23 = "100000000000000000";
const sc_lv<32> cceip_kernel::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool cceip_kernel::ap_const_boolean_1 = true;
const sc_lv<32> cceip_kernel::ap_const_lv32_1 = "1";
const sc_lv<32> cceip_kernel::ap_const_lv32_8 = "1000";
const bool cceip_kernel::ap_const_boolean_0 = false;
const sc_lv<1> cceip_kernel::ap_const_lv1_0 = "0";
const sc_lv<32> cceip_kernel::ap_const_lv32_B = "1011";
const sc_lv<32> cceip_kernel::ap_const_lv32_11 = "10001";
const int cceip_kernel::C_S_AXI_DATA_WIDTH = "100000";
const int cceip_kernel::C_M_AXI_M00_AXI_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int cceip_kernel::C_M_AXI_M00_AXI_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int cceip_kernel::C_M_AXI_M00_AXI_CACHE_VALUE = "11";
const int cceip_kernel::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> cceip_kernel::ap_const_lv32_A = "1010";
const sc_lv<32> cceip_kernel::ap_const_lv32_C = "1100";
const sc_lv<32> cceip_kernel::ap_const_lv32_7 = "111";
const sc_lv<1> cceip_kernel::ap_const_lv1_1 = "1";
const sc_lv<32> cceip_kernel::ap_const_lv32_9 = "1001";
const sc_lv<13> cceip_kernel::ap_const_lv13_0 = "0000000000000";
const sc_lv<32> cceip_kernel::ap_const_lv32_1000 = "1000000000000";
const sc_lv<3> cceip_kernel::ap_const_lv3_0 = "000";
const sc_lv<2> cceip_kernel::ap_const_lv2_0 = "00";
const sc_lv<4> cceip_kernel::ap_const_lv4_0 = "0000";
const sc_lv<4> cceip_kernel::ap_const_lv4_F = "1111";
const sc_lv<32> cceip_kernel::ap_const_lv32_2 = "10";
const sc_lv<32> cceip_kernel::ap_const_lv32_3F = "111111";
const sc_lv<13> cceip_kernel::ap_const_lv13_1000 = "1000000000000";
const sc_lv<13> cceip_kernel::ap_const_lv13_1 = "1";

cceip_kernel::cceip_kernel(sc_module_name name) : sc_module(name), mVcdFile(0) {
    cceip_kernel_control_s_axi_U = new cceip_kernel_control_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>("cceip_kernel_control_s_axi_U");
    cceip_kernel_control_s_axi_U->AWVALID(s_axi_control_AWVALID);
    cceip_kernel_control_s_axi_U->AWREADY(s_axi_control_AWREADY);
    cceip_kernel_control_s_axi_U->AWADDR(s_axi_control_AWADDR);
    cceip_kernel_control_s_axi_U->WVALID(s_axi_control_WVALID);
    cceip_kernel_control_s_axi_U->WREADY(s_axi_control_WREADY);
    cceip_kernel_control_s_axi_U->WDATA(s_axi_control_WDATA);
    cceip_kernel_control_s_axi_U->WSTRB(s_axi_control_WSTRB);
    cceip_kernel_control_s_axi_U->ARVALID(s_axi_control_ARVALID);
    cceip_kernel_control_s_axi_U->ARREADY(s_axi_control_ARREADY);
    cceip_kernel_control_s_axi_U->ARADDR(s_axi_control_ARADDR);
    cceip_kernel_control_s_axi_U->RVALID(s_axi_control_RVALID);
    cceip_kernel_control_s_axi_U->RREADY(s_axi_control_RREADY);
    cceip_kernel_control_s_axi_U->RDATA(s_axi_control_RDATA);
    cceip_kernel_control_s_axi_U->RRESP(s_axi_control_RRESP);
    cceip_kernel_control_s_axi_U->BVALID(s_axi_control_BVALID);
    cceip_kernel_control_s_axi_U->BREADY(s_axi_control_BREADY);
    cceip_kernel_control_s_axi_U->BRESP(s_axi_control_BRESP);
    cceip_kernel_control_s_axi_U->ACLK(ap_clk);
    cceip_kernel_control_s_axi_U->ARESET(ap_rst_n_inv);
    cceip_kernel_control_s_axi_U->ACLK_EN(ap_var_for_const0);
    cceip_kernel_control_s_axi_U->ap_start(ap_start);
    cceip_kernel_control_s_axi_U->interrupt(interrupt);
    cceip_kernel_control_s_axi_U->ap_ready(ap_ready);
    cceip_kernel_control_s_axi_U->ap_done(ap_done);
    cceip_kernel_control_s_axi_U->ap_idle(ap_idle);
    cceip_kernel_control_s_axi_U->input_size(input_size);
    cceip_kernel_control_s_axi_U->input_addr(input_addr);
    cceip_kernel_control_s_axi_U->output_size_addr(output_size_addr);
    cceip_kernel_control_s_axi_U->output_addr(output_addr);
    cceip_kernel_m00_axi_m_axi_U = new cceip_kernel_m00_axi_m_axi<0,32,64,5,16,16,16,16,C_M_AXI_M00_AXI_ID_WIDTH,C_M_AXI_M00_AXI_ADDR_WIDTH,C_M_AXI_M00_AXI_DATA_WIDTH,C_M_AXI_M00_AXI_AWUSER_WIDTH,C_M_AXI_M00_AXI_ARUSER_WIDTH,C_M_AXI_M00_AXI_WUSER_WIDTH,C_M_AXI_M00_AXI_RUSER_WIDTH,C_M_AXI_M00_AXI_BUSER_WIDTH,C_M_AXI_M00_AXI_USER_VALUE,C_M_AXI_M00_AXI_PROT_VALUE,C_M_AXI_M00_AXI_CACHE_VALUE>("cceip_kernel_m00_axi_m_axi_U");
    cceip_kernel_m00_axi_m_axi_U->AWVALID(m_axi_m00_axi_AWVALID);
    cceip_kernel_m00_axi_m_axi_U->AWREADY(m_axi_m00_axi_AWREADY);
    cceip_kernel_m00_axi_m_axi_U->AWADDR(m_axi_m00_axi_AWADDR);
    cceip_kernel_m00_axi_m_axi_U->AWID(m_axi_m00_axi_AWID);
    cceip_kernel_m00_axi_m_axi_U->AWLEN(m_axi_m00_axi_AWLEN);
    cceip_kernel_m00_axi_m_axi_U->AWSIZE(m_axi_m00_axi_AWSIZE);
    cceip_kernel_m00_axi_m_axi_U->AWBURST(m_axi_m00_axi_AWBURST);
    cceip_kernel_m00_axi_m_axi_U->AWLOCK(m_axi_m00_axi_AWLOCK);
    cceip_kernel_m00_axi_m_axi_U->AWCACHE(m_axi_m00_axi_AWCACHE);
    cceip_kernel_m00_axi_m_axi_U->AWPROT(m_axi_m00_axi_AWPROT);
    cceip_kernel_m00_axi_m_axi_U->AWQOS(m_axi_m00_axi_AWQOS);
    cceip_kernel_m00_axi_m_axi_U->AWREGION(m_axi_m00_axi_AWREGION);
    cceip_kernel_m00_axi_m_axi_U->AWUSER(m_axi_m00_axi_AWUSER);
    cceip_kernel_m00_axi_m_axi_U->WVALID(m_axi_m00_axi_WVALID);
    cceip_kernel_m00_axi_m_axi_U->WREADY(m_axi_m00_axi_WREADY);
    cceip_kernel_m00_axi_m_axi_U->WDATA(m_axi_m00_axi_WDATA);
    cceip_kernel_m00_axi_m_axi_U->WSTRB(m_axi_m00_axi_WSTRB);
    cceip_kernel_m00_axi_m_axi_U->WLAST(m_axi_m00_axi_WLAST);
    cceip_kernel_m00_axi_m_axi_U->WID(m_axi_m00_axi_WID);
    cceip_kernel_m00_axi_m_axi_U->WUSER(m_axi_m00_axi_WUSER);
    cceip_kernel_m00_axi_m_axi_U->ARVALID(m_axi_m00_axi_ARVALID);
    cceip_kernel_m00_axi_m_axi_U->ARREADY(m_axi_m00_axi_ARREADY);
    cceip_kernel_m00_axi_m_axi_U->ARADDR(m_axi_m00_axi_ARADDR);
    cceip_kernel_m00_axi_m_axi_U->ARID(m_axi_m00_axi_ARID);
    cceip_kernel_m00_axi_m_axi_U->ARLEN(m_axi_m00_axi_ARLEN);
    cceip_kernel_m00_axi_m_axi_U->ARSIZE(m_axi_m00_axi_ARSIZE);
    cceip_kernel_m00_axi_m_axi_U->ARBURST(m_axi_m00_axi_ARBURST);
    cceip_kernel_m00_axi_m_axi_U->ARLOCK(m_axi_m00_axi_ARLOCK);
    cceip_kernel_m00_axi_m_axi_U->ARCACHE(m_axi_m00_axi_ARCACHE);
    cceip_kernel_m00_axi_m_axi_U->ARPROT(m_axi_m00_axi_ARPROT);
    cceip_kernel_m00_axi_m_axi_U->ARQOS(m_axi_m00_axi_ARQOS);
    cceip_kernel_m00_axi_m_axi_U->ARREGION(m_axi_m00_axi_ARREGION);
    cceip_kernel_m00_axi_m_axi_U->ARUSER(m_axi_m00_axi_ARUSER);
    cceip_kernel_m00_axi_m_axi_U->RVALID(m_axi_m00_axi_RVALID);
    cceip_kernel_m00_axi_m_axi_U->RREADY(m_axi_m00_axi_RREADY);
    cceip_kernel_m00_axi_m_axi_U->RDATA(m_axi_m00_axi_RDATA);
    cceip_kernel_m00_axi_m_axi_U->RLAST(m_axi_m00_axi_RLAST);
    cceip_kernel_m00_axi_m_axi_U->RID(m_axi_m00_axi_RID);
    cceip_kernel_m00_axi_m_axi_U->RUSER(m_axi_m00_axi_RUSER);
    cceip_kernel_m00_axi_m_axi_U->RRESP(m_axi_m00_axi_RRESP);
    cceip_kernel_m00_axi_m_axi_U->BVALID(m_axi_m00_axi_BVALID);
    cceip_kernel_m00_axi_m_axi_U->BREADY(m_axi_m00_axi_BREADY);
    cceip_kernel_m00_axi_m_axi_U->BRESP(m_axi_m00_axi_BRESP);
    cceip_kernel_m00_axi_m_axi_U->BID(m_axi_m00_axi_BID);
    cceip_kernel_m00_axi_m_axi_U->BUSER(m_axi_m00_axi_BUSER);
    cceip_kernel_m00_axi_m_axi_U->ACLK(ap_clk);
    cceip_kernel_m00_axi_m_axi_U->ARESET(ap_rst_n_inv);
    cceip_kernel_m00_axi_m_axi_U->ACLK_EN(ap_var_for_const0);
    cceip_kernel_m00_axi_m_axi_U->I_ARVALID(m00_axi_ARVALID);
    cceip_kernel_m00_axi_m_axi_U->I_ARREADY(m00_axi_ARREADY);
    cceip_kernel_m00_axi_m_axi_U->I_ARADDR(m00_axi_addr_reg_284);
    cceip_kernel_m00_axi_m_axi_U->I_ARID(ap_var_for_const1);
    cceip_kernel_m00_axi_m_axi_U->I_ARLEN(ap_var_for_const2);
    cceip_kernel_m00_axi_m_axi_U->I_ARSIZE(ap_var_for_const3);
    cceip_kernel_m00_axi_m_axi_U->I_ARLOCK(ap_var_for_const4);
    cceip_kernel_m00_axi_m_axi_U->I_ARCACHE(ap_var_for_const5);
    cceip_kernel_m00_axi_m_axi_U->I_ARQOS(ap_var_for_const5);
    cceip_kernel_m00_axi_m_axi_U->I_ARPROT(ap_var_for_const3);
    cceip_kernel_m00_axi_m_axi_U->I_ARUSER(ap_var_for_const1);
    cceip_kernel_m00_axi_m_axi_U->I_ARBURST(ap_var_for_const4);
    cceip_kernel_m00_axi_m_axi_U->I_ARREGION(ap_var_for_const5);
    cceip_kernel_m00_axi_m_axi_U->I_RVALID(m00_axi_RVALID);
    cceip_kernel_m00_axi_m_axi_U->I_RREADY(m00_axi_RREADY);
    cceip_kernel_m00_axi_m_axi_U->I_RDATA(m00_axi_RDATA);
    cceip_kernel_m00_axi_m_axi_U->I_RID(m00_axi_RID);
    cceip_kernel_m00_axi_m_axi_U->I_RUSER(m00_axi_RUSER);
    cceip_kernel_m00_axi_m_axi_U->I_RRESP(m00_axi_RRESP);
    cceip_kernel_m00_axi_m_axi_U->I_RLAST(m00_axi_RLAST);
    cceip_kernel_m00_axi_m_axi_U->I_AWVALID(m00_axi_AWVALID);
    cceip_kernel_m00_axi_m_axi_U->I_AWREADY(m00_axi_AWREADY);
    cceip_kernel_m00_axi_m_axi_U->I_AWADDR(m00_axi_addr_reg_284);
    cceip_kernel_m00_axi_m_axi_U->I_AWID(ap_var_for_const1);
    cceip_kernel_m00_axi_m_axi_U->I_AWLEN(ap_var_for_const2);
    cceip_kernel_m00_axi_m_axi_U->I_AWSIZE(ap_var_for_const3);
    cceip_kernel_m00_axi_m_axi_U->I_AWLOCK(ap_var_for_const4);
    cceip_kernel_m00_axi_m_axi_U->I_AWCACHE(ap_var_for_const5);
    cceip_kernel_m00_axi_m_axi_U->I_AWQOS(ap_var_for_const5);
    cceip_kernel_m00_axi_m_axi_U->I_AWPROT(ap_var_for_const3);
    cceip_kernel_m00_axi_m_axi_U->I_AWUSER(ap_var_for_const1);
    cceip_kernel_m00_axi_m_axi_U->I_AWBURST(ap_var_for_const4);
    cceip_kernel_m00_axi_m_axi_U->I_AWREGION(ap_var_for_const5);
    cceip_kernel_m00_axi_m_axi_U->I_WVALID(m00_axi_WVALID);
    cceip_kernel_m00_axi_m_axi_U->I_WREADY(m00_axi_WREADY);
    cceip_kernel_m00_axi_m_axi_U->I_WDATA(m00_axi_output_buffer_load_reg_338);
    cceip_kernel_m00_axi_m_axi_U->I_WID(ap_var_for_const1);
    cceip_kernel_m00_axi_m_axi_U->I_WUSER(ap_var_for_const1);
    cceip_kernel_m00_axi_m_axi_U->I_WLAST(ap_var_for_const6);
    cceip_kernel_m00_axi_m_axi_U->I_WSTRB(ap_var_for_const7);
    cceip_kernel_m00_axi_m_axi_U->I_BVALID(m00_axi_BVALID);
    cceip_kernel_m00_axi_m_axi_U->I_BREADY(m00_axi_BREADY);
    cceip_kernel_m00_axi_m_axi_U->I_BRESP(m00_axi_BRESP);
    cceip_kernel_m00_axi_m_axi_U->I_BID(m00_axi_BID);
    cceip_kernel_m00_axi_m_axi_U->I_BUSER(m00_axi_BUSER);
    m00_axi_input_buffer_U = new cceip_kernel_m00_axi_input_buffer("m00_axi_input_buffer_U");
    m00_axi_input_buffer_U->clk(ap_clk);
    m00_axi_input_buffer_U->reset(ap_rst_n_inv);
    m00_axi_input_buffer_U->address0(m00_axi_input_buffer_address0);
    m00_axi_input_buffer_U->ce0(m00_axi_input_buffer_ce0);
    m00_axi_input_buffer_U->we0(m00_axi_input_buffer_we0);
    m00_axi_input_buffer_U->d0(m00_axi_addr_read_reg_300);
    m00_axi_input_buffer_U->q0(m00_axi_input_buffer_q0);
    m00_axi_output_buffer_U = new cceip_kernel_m00_axi_input_buffer("m00_axi_output_buffer_U");
    m00_axi_output_buffer_U->clk(ap_clk);
    m00_axi_output_buffer_U->reset(ap_rst_n_inv);
    m00_axi_output_buffer_U->address0(m00_axi_output_buffer_address0);
    m00_axi_output_buffer_U->ce0(m00_axi_output_buffer_ce0);
    m00_axi_output_buffer_U->we0(m00_axi_output_buffer_we0);
    m00_axi_output_buffer_U->d0(m00_axi_output_buffer_d0);
    m00_axi_output_buffer_U->q0(m00_axi_output_buffer_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln55_fu_232_p2);
    sensitive << ( ap_phi_mux_phi_ln55_phi_fu_176_p4 );

    SC_METHOD(thread_add_ln63_fu_273_p2);
    sensitive << ( phi_ln63_reg_195 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp2_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln55_reg_291 );
    sensitive << ( m00_axi_RVALID );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln55_reg_291 );
    sensitive << ( m00_axi_RVALID );

    SC_METHOD(thread_ap_block_pp1_stage0);

    SC_METHOD(thread_ap_block_pp1_stage0_11001);

    SC_METHOD(thread_ap_block_pp1_stage0_subdone);

    SC_METHOD(thread_ap_block_pp2_stage0);

    SC_METHOD(thread_ap_block_pp2_stage0_01001);

    SC_METHOD(thread_ap_block_pp2_stage0_11001);
    sensitive << ( ap_enable_reg_pp2_iter2 );
    sensitive << ( ap_block_state18_io );

    SC_METHOD(thread_ap_block_pp2_stage0_subdone);
    sensitive << ( ap_enable_reg_pp2_iter2 );
    sensitive << ( ap_block_state18_io );

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter1);
    sensitive << ( icmp_ln55_reg_291 );
    sensitive << ( m00_axi_RVALID );

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state13_pp1_stage0_iter0);

    SC_METHOD(thread_ap_block_state14_pp1_stage0_iter1);

    SC_METHOD(thread_ap_block_state16_pp2_stage0_iter0);

    SC_METHOD(thread_ap_block_state17_pp2_stage0_iter1);

    SC_METHOD(thread_ap_block_state18_io);
    sensitive << ( icmp_ln63_reg_324_pp2_iter1_reg );
    sensitive << ( m00_axi_WREADY );

    SC_METHOD(thread_ap_block_state18_pp2_stage0_iter2);

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter0);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state9);
    sensitive << ( icmp_ln55_fu_226_p2 );

    SC_METHOD(thread_ap_condition_pp1_exit_iter0_state13);
    sensitive << ( icmp_ln58_fu_243_p2 );

    SC_METHOD(thread_ap_condition_pp2_exit_iter0_state16);
    sensitive << ( icmp_ln63_fu_267_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( m00_axi_BVALID );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_enable_pp2);
    sensitive << ( ap_idle_pp2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_ap_idle_pp2);
    sensitive << ( ap_enable_reg_pp2_iter2 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_enable_reg_pp2_iter1 );

    SC_METHOD(thread_ap_phi_mux_phi_ln55_phi_fu_176_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln55_reg_291 );
    sensitive << ( phi_ln55_reg_172 );
    sensitive << ( add_ln55_reg_295 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( m00_axi_BVALID );

    SC_METHOD(thread_empty_fu_216_p1);
    sensitive << ( input_addr1_fu_206_p4 );

    SC_METHOD(thread_i_fu_249_p2);
    sensitive << ( i_0_reg_184 );

    SC_METHOD(thread_icmp_ln55_fu_226_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_phi_mux_phi_ln55_phi_fu_176_p4 );

    SC_METHOD(thread_icmp_ln58_fu_243_p2);
    sensitive << ( i_0_reg_184 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_icmp_ln63_fu_267_p2);
    sensitive << ( phi_ln63_reg_195 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_block_pp2_stage0_11001 );
    sensitive << ( ap_enable_reg_pp2_iter0 );

    SC_METHOD(thread_input_addr1_fu_206_p4);
    sensitive << ( input_addr );

    SC_METHOD(thread_m00_axi_ARVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( m00_axi_ARREADY );

    SC_METHOD(thread_m00_axi_AWVALID);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( m00_axi_AWREADY );

    SC_METHOD(thread_m00_axi_BREADY);
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( m00_axi_BVALID );

    SC_METHOD(thread_m00_axi_RREADY);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln55_reg_291 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m00_axi_WVALID);
    sensitive << ( ap_enable_reg_pp2_iter2 );
    sensitive << ( icmp_ln63_reg_324_pp2_iter1_reg );
    sensitive << ( ap_block_pp2_stage0_11001 );

    SC_METHOD(thread_m00_axi_blk_n_AR);
    sensitive << ( m_axi_m00_axi_ARREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m00_axi_blk_n_AW);
    sensitive << ( m_axi_m00_axi_AWREADY );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_m00_axi_blk_n_B);
    sensitive << ( m_axi_m00_axi_BVALID );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_m00_axi_blk_n_R);
    sensitive << ( m_axi_m00_axi_RVALID );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln55_reg_291 );

    SC_METHOD(thread_m00_axi_blk_n_W);
    sensitive << ( m_axi_m00_axi_WREADY );
    sensitive << ( ap_enable_reg_pp2_iter2 );
    sensitive << ( ap_block_pp2_stage0 );
    sensitive << ( icmp_ln63_reg_324_pp2_iter1_reg );

    SC_METHOD(thread_m00_axi_input_buffer_address0);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( zext_ln59_fu_255_p1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( zext_ln55_fu_238_p1 );
    sensitive << ( ap_block_pp1_stage0 );

    SC_METHOD(thread_m00_axi_input_buffer_ce0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_m00_axi_input_buffer_we0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln55_reg_291_pp0_iter1_reg );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_m00_axi_output_buffer_address0);
    sensitive << ( ap_block_pp2_stage0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( zext_ln59_reg_314 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( zext_ln63_fu_279_p1 );

    SC_METHOD(thread_m00_axi_output_buffer_ce0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_block_pp2_stage0_11001 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_m00_axi_output_buffer_d0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( m00_axi_input_buffer_q0 );
    sensitive << ( ap_block_pp1_stage0 );

    SC_METHOD(thread_m00_axi_output_buffer_we0);
    sensitive << ( icmp_ln58_reg_305 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_zext_ln55_fu_238_p1);
    sensitive << ( phi_ln55_reg_172_pp0_iter1_reg );

    SC_METHOD(thread_zext_ln59_fu_255_p1);
    sensitive << ( i_0_reg_184 );

    SC_METHOD(thread_zext_ln63_fu_279_p1);
    sensitive << ( phi_ln63_reg_195 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_enable_reg_pp2_iter2 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( m00_axi_AWREADY );
    sensitive << ( m00_axi_ARREADY );
    sensitive << ( m00_axi_BVALID );
    sensitive << ( icmp_ln55_fu_226_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln58_fu_243_p2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( icmp_ln63_fu_267_p2 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_enable_reg_pp2_iter1 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp1_stage0_subdone );
    sensitive << ( ap_block_pp2_stage0_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const7);

    ap_rst_reg_2 = SC_LOGIC_1;
    ap_rst_reg_1 = SC_LOGIC_1;
    ap_rst_n_inv = SC_LOGIC_1;
    ap_CS_fsm = "000000000000000001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "cceip_kernel_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_m00_axi_AWVALID, "(port)m_axi_m00_axi_AWVALID");
    sc_trace(mVcdFile, m_axi_m00_axi_AWREADY, "(port)m_axi_m00_axi_AWREADY");
    sc_trace(mVcdFile, m_axi_m00_axi_AWADDR, "(port)m_axi_m00_axi_AWADDR");
    sc_trace(mVcdFile, m_axi_m00_axi_AWID, "(port)m_axi_m00_axi_AWID");
    sc_trace(mVcdFile, m_axi_m00_axi_AWLEN, "(port)m_axi_m00_axi_AWLEN");
    sc_trace(mVcdFile, m_axi_m00_axi_AWSIZE, "(port)m_axi_m00_axi_AWSIZE");
    sc_trace(mVcdFile, m_axi_m00_axi_AWBURST, "(port)m_axi_m00_axi_AWBURST");
    sc_trace(mVcdFile, m_axi_m00_axi_AWLOCK, "(port)m_axi_m00_axi_AWLOCK");
    sc_trace(mVcdFile, m_axi_m00_axi_AWCACHE, "(port)m_axi_m00_axi_AWCACHE");
    sc_trace(mVcdFile, m_axi_m00_axi_AWPROT, "(port)m_axi_m00_axi_AWPROT");
    sc_trace(mVcdFile, m_axi_m00_axi_AWQOS, "(port)m_axi_m00_axi_AWQOS");
    sc_trace(mVcdFile, m_axi_m00_axi_AWREGION, "(port)m_axi_m00_axi_AWREGION");
    sc_trace(mVcdFile, m_axi_m00_axi_AWUSER, "(port)m_axi_m00_axi_AWUSER");
    sc_trace(mVcdFile, m_axi_m00_axi_WVALID, "(port)m_axi_m00_axi_WVALID");
    sc_trace(mVcdFile, m_axi_m00_axi_WREADY, "(port)m_axi_m00_axi_WREADY");
    sc_trace(mVcdFile, m_axi_m00_axi_WDATA, "(port)m_axi_m00_axi_WDATA");
    sc_trace(mVcdFile, m_axi_m00_axi_WSTRB, "(port)m_axi_m00_axi_WSTRB");
    sc_trace(mVcdFile, m_axi_m00_axi_WLAST, "(port)m_axi_m00_axi_WLAST");
    sc_trace(mVcdFile, m_axi_m00_axi_WID, "(port)m_axi_m00_axi_WID");
    sc_trace(mVcdFile, m_axi_m00_axi_WUSER, "(port)m_axi_m00_axi_WUSER");
    sc_trace(mVcdFile, m_axi_m00_axi_ARVALID, "(port)m_axi_m00_axi_ARVALID");
    sc_trace(mVcdFile, m_axi_m00_axi_ARREADY, "(port)m_axi_m00_axi_ARREADY");
    sc_trace(mVcdFile, m_axi_m00_axi_ARADDR, "(port)m_axi_m00_axi_ARADDR");
    sc_trace(mVcdFile, m_axi_m00_axi_ARID, "(port)m_axi_m00_axi_ARID");
    sc_trace(mVcdFile, m_axi_m00_axi_ARLEN, "(port)m_axi_m00_axi_ARLEN");
    sc_trace(mVcdFile, m_axi_m00_axi_ARSIZE, "(port)m_axi_m00_axi_ARSIZE");
    sc_trace(mVcdFile, m_axi_m00_axi_ARBURST, "(port)m_axi_m00_axi_ARBURST");
    sc_trace(mVcdFile, m_axi_m00_axi_ARLOCK, "(port)m_axi_m00_axi_ARLOCK");
    sc_trace(mVcdFile, m_axi_m00_axi_ARCACHE, "(port)m_axi_m00_axi_ARCACHE");
    sc_trace(mVcdFile, m_axi_m00_axi_ARPROT, "(port)m_axi_m00_axi_ARPROT");
    sc_trace(mVcdFile, m_axi_m00_axi_ARQOS, "(port)m_axi_m00_axi_ARQOS");
    sc_trace(mVcdFile, m_axi_m00_axi_ARREGION, "(port)m_axi_m00_axi_ARREGION");
    sc_trace(mVcdFile, m_axi_m00_axi_ARUSER, "(port)m_axi_m00_axi_ARUSER");
    sc_trace(mVcdFile, m_axi_m00_axi_RVALID, "(port)m_axi_m00_axi_RVALID");
    sc_trace(mVcdFile, m_axi_m00_axi_RREADY, "(port)m_axi_m00_axi_RREADY");
    sc_trace(mVcdFile, m_axi_m00_axi_RDATA, "(port)m_axi_m00_axi_RDATA");
    sc_trace(mVcdFile, m_axi_m00_axi_RLAST, "(port)m_axi_m00_axi_RLAST");
    sc_trace(mVcdFile, m_axi_m00_axi_RID, "(port)m_axi_m00_axi_RID");
    sc_trace(mVcdFile, m_axi_m00_axi_RUSER, "(port)m_axi_m00_axi_RUSER");
    sc_trace(mVcdFile, m_axi_m00_axi_RRESP, "(port)m_axi_m00_axi_RRESP");
    sc_trace(mVcdFile, m_axi_m00_axi_BVALID, "(port)m_axi_m00_axi_BVALID");
    sc_trace(mVcdFile, m_axi_m00_axi_BREADY, "(port)m_axi_m00_axi_BREADY");
    sc_trace(mVcdFile, m_axi_m00_axi_BRESP, "(port)m_axi_m00_axi_BRESP");
    sc_trace(mVcdFile, m_axi_m00_axi_BID, "(port)m_axi_m00_axi_BID");
    sc_trace(mVcdFile, m_axi_m00_axi_BUSER, "(port)m_axi_m00_axi_BUSER");
    sc_trace(mVcdFile, s_axi_control_AWVALID, "(port)s_axi_control_AWVALID");
    sc_trace(mVcdFile, s_axi_control_AWREADY, "(port)s_axi_control_AWREADY");
    sc_trace(mVcdFile, s_axi_control_AWADDR, "(port)s_axi_control_AWADDR");
    sc_trace(mVcdFile, s_axi_control_WVALID, "(port)s_axi_control_WVALID");
    sc_trace(mVcdFile, s_axi_control_WREADY, "(port)s_axi_control_WREADY");
    sc_trace(mVcdFile, s_axi_control_WDATA, "(port)s_axi_control_WDATA");
    sc_trace(mVcdFile, s_axi_control_WSTRB, "(port)s_axi_control_WSTRB");
    sc_trace(mVcdFile, s_axi_control_ARVALID, "(port)s_axi_control_ARVALID");
    sc_trace(mVcdFile, s_axi_control_ARREADY, "(port)s_axi_control_ARREADY");
    sc_trace(mVcdFile, s_axi_control_ARADDR, "(port)s_axi_control_ARADDR");
    sc_trace(mVcdFile, s_axi_control_RVALID, "(port)s_axi_control_RVALID");
    sc_trace(mVcdFile, s_axi_control_RREADY, "(port)s_axi_control_RREADY");
    sc_trace(mVcdFile, s_axi_control_RDATA, "(port)s_axi_control_RDATA");
    sc_trace(mVcdFile, s_axi_control_RRESP, "(port)s_axi_control_RRESP");
    sc_trace(mVcdFile, s_axi_control_BVALID, "(port)s_axi_control_BVALID");
    sc_trace(mVcdFile, s_axi_control_BREADY, "(port)s_axi_control_BREADY");
    sc_trace(mVcdFile, s_axi_control_BRESP, "(port)s_axi_control_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_reg_2, "ap_rst_reg_2");
    sc_trace(mVcdFile, ap_rst_reg_1, "ap_rst_reg_1");
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, input_size, "input_size");
    sc_trace(mVcdFile, input_addr, "input_addr");
    sc_trace(mVcdFile, output_size_addr, "output_size_addr");
    sc_trace(mVcdFile, output_addr, "output_addr");
    sc_trace(mVcdFile, m00_axi_blk_n_AR, "m00_axi_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, m00_axi_blk_n_R, "m00_axi_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln55_reg_291, "icmp_ln55_reg_291");
    sc_trace(mVcdFile, m00_axi_blk_n_AW, "m00_axi_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, m00_axi_blk_n_W, "m00_axi_blk_n_W");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter2, "ap_enable_reg_pp2_iter2");
    sc_trace(mVcdFile, ap_block_pp2_stage0, "ap_block_pp2_stage0");
    sc_trace(mVcdFile, icmp_ln63_reg_324, "icmp_ln63_reg_324");
    sc_trace(mVcdFile, icmp_ln63_reg_324_pp2_iter1_reg, "icmp_ln63_reg_324_pp2_iter1_reg");
    sc_trace(mVcdFile, m00_axi_blk_n_B, "m00_axi_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, m00_axi_AWVALID, "m00_axi_AWVALID");
    sc_trace(mVcdFile, m00_axi_AWREADY, "m00_axi_AWREADY");
    sc_trace(mVcdFile, m00_axi_WVALID, "m00_axi_WVALID");
    sc_trace(mVcdFile, m00_axi_WREADY, "m00_axi_WREADY");
    sc_trace(mVcdFile, m00_axi_ARVALID, "m00_axi_ARVALID");
    sc_trace(mVcdFile, m00_axi_ARREADY, "m00_axi_ARREADY");
    sc_trace(mVcdFile, m00_axi_RVALID, "m00_axi_RVALID");
    sc_trace(mVcdFile, m00_axi_RREADY, "m00_axi_RREADY");
    sc_trace(mVcdFile, m00_axi_RDATA, "m00_axi_RDATA");
    sc_trace(mVcdFile, m00_axi_RLAST, "m00_axi_RLAST");
    sc_trace(mVcdFile, m00_axi_RID, "m00_axi_RID");
    sc_trace(mVcdFile, m00_axi_RUSER, "m00_axi_RUSER");
    sc_trace(mVcdFile, m00_axi_RRESP, "m00_axi_RRESP");
    sc_trace(mVcdFile, m00_axi_BVALID, "m00_axi_BVALID");
    sc_trace(mVcdFile, m00_axi_BREADY, "m00_axi_BREADY");
    sc_trace(mVcdFile, m00_axi_BRESP, "m00_axi_BRESP");
    sc_trace(mVcdFile, m00_axi_BID, "m00_axi_BID");
    sc_trace(mVcdFile, m00_axi_BUSER, "m00_axi_BUSER");
    sc_trace(mVcdFile, phi_ln55_reg_172, "phi_ln55_reg_172");
    sc_trace(mVcdFile, phi_ln55_reg_172_pp0_iter1_reg, "phi_ln55_reg_172_pp0_iter1_reg");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter0, "ap_block_state9_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter1, "ap_block_state10_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter2, "ap_block_state11_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_0_reg_184, "i_0_reg_184");
    sc_trace(mVcdFile, phi_ln63_reg_195, "phi_ln63_reg_195");
    sc_trace(mVcdFile, m00_axi_addr_reg_284, "m00_axi_addr_reg_284");
    sc_trace(mVcdFile, icmp_ln55_fu_226_p2, "icmp_ln55_fu_226_p2");
    sc_trace(mVcdFile, icmp_ln55_reg_291_pp0_iter1_reg, "icmp_ln55_reg_291_pp0_iter1_reg");
    sc_trace(mVcdFile, add_ln55_fu_232_p2, "add_ln55_fu_232_p2");
    sc_trace(mVcdFile, add_ln55_reg_295, "add_ln55_reg_295");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, m00_axi_addr_read_reg_300, "m00_axi_addr_read_reg_300");
    sc_trace(mVcdFile, icmp_ln58_fu_243_p2, "icmp_ln58_fu_243_p2");
    sc_trace(mVcdFile, icmp_ln58_reg_305, "icmp_ln58_reg_305");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_block_state13_pp1_stage0_iter0, "ap_block_state13_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state14_pp1_stage0_iter1, "ap_block_state14_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001, "ap_block_pp1_stage0_11001");
    sc_trace(mVcdFile, i_fu_249_p2, "i_fu_249_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, zext_ln59_fu_255_p1, "zext_ln59_fu_255_p1");
    sc_trace(mVcdFile, zext_ln59_reg_314, "zext_ln59_reg_314");
    sc_trace(mVcdFile, icmp_ln63_fu_267_p2, "icmp_ln63_fu_267_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp2_stage0, "ap_CS_fsm_pp2_stage0");
    sc_trace(mVcdFile, ap_block_state16_pp2_stage0_iter0, "ap_block_state16_pp2_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state17_pp2_stage0_iter1, "ap_block_state17_pp2_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state18_pp2_stage0_iter2, "ap_block_state18_pp2_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state18_io, "ap_block_state18_io");
    sc_trace(mVcdFile, ap_block_pp2_stage0_11001, "ap_block_pp2_stage0_11001");
    sc_trace(mVcdFile, add_ln63_fu_273_p2, "add_ln63_fu_273_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter0, "ap_enable_reg_pp2_iter0");
    sc_trace(mVcdFile, m00_axi_output_buffer_q0, "m00_axi_output_buffer_q0");
    sc_trace(mVcdFile, m00_axi_output_buffer_load_reg_338, "m00_axi_output_buffer_load_reg_338");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter1, "ap_enable_reg_pp2_iter1");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state9, "ap_condition_pp0_exit_iter0_state9");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_block_pp1_stage0_subdone, "ap_block_pp1_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp1_exit_iter0_state13, "ap_condition_pp1_exit_iter0_state13");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, ap_block_pp2_stage0_subdone, "ap_block_pp2_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp2_exit_iter0_state16, "ap_condition_pp2_exit_iter0_state16");
    sc_trace(mVcdFile, m00_axi_input_buffer_address0, "m00_axi_input_buffer_address0");
    sc_trace(mVcdFile, m00_axi_input_buffer_ce0, "m00_axi_input_buffer_ce0");
    sc_trace(mVcdFile, m00_axi_input_buffer_we0, "m00_axi_input_buffer_we0");
    sc_trace(mVcdFile, m00_axi_input_buffer_q0, "m00_axi_input_buffer_q0");
    sc_trace(mVcdFile, m00_axi_output_buffer_address0, "m00_axi_output_buffer_address0");
    sc_trace(mVcdFile, m00_axi_output_buffer_ce0, "m00_axi_output_buffer_ce0");
    sc_trace(mVcdFile, m00_axi_output_buffer_we0, "m00_axi_output_buffer_we0");
    sc_trace(mVcdFile, m00_axi_output_buffer_d0, "m00_axi_output_buffer_d0");
    sc_trace(mVcdFile, ap_phi_mux_phi_ln55_phi_fu_176_p4, "ap_phi_mux_phi_ln55_phi_fu_176_p4");
    sc_trace(mVcdFile, zext_ln55_fu_238_p1, "zext_ln55_fu_238_p1");
    sc_trace(mVcdFile, ap_block_pp1_stage0, "ap_block_pp1_stage0");
    sc_trace(mVcdFile, zext_ln63_fu_279_p1, "zext_ln63_fu_279_p1");
    sc_trace(mVcdFile, empty_fu_216_p1, "empty_fu_216_p1");
    sc_trace(mVcdFile, ap_block_pp2_stage0_01001, "ap_block_pp2_stage0_01001");
    sc_trace(mVcdFile, input_addr1_fu_206_p4, "input_addr1_fu_206_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
    sc_trace(mVcdFile, ap_idle_pp2, "ap_idle_pp2");
    sc_trace(mVcdFile, ap_enable_pp2, "ap_enable_pp2");
#endif

    }
    mHdltvinHandle.open("cceip_kernel.hdltvin.dat");
    mHdltvoutHandle.open("cceip_kernel.hdltvout.dat");
}

cceip_kernel::~cceip_kernel() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete cceip_kernel_control_s_axi_U;
    delete cceip_kernel_m00_axi_m_axi_U;
    delete m00_axi_input_buffer_U;
    delete m00_axi_output_buffer_U;
}

void cceip_kernel::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void cceip_kernel::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void cceip_kernel::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void cceip_kernel::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_1000;
}

void cceip_kernel::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void cceip_kernel::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void cceip_kernel::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void cceip_kernel::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv4_F;
}

void cceip_kernel::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state9.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state9.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state9.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state13.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state13.read()))) {
            ap_enable_reg_pp1_iter1 = (ap_condition_pp1_exit_iter0_state13.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
            ap_enable_reg_pp1_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp2_exit_iter0_state16.read()))) {
            ap_enable_reg_pp2_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
                    esl_seteq<1,1,1>(m00_axi_AWREADY.read(), ap_const_logic_1))) {
            ap_enable_reg_pp2_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp2_exit_iter0_state16.read())) {
                ap_enable_reg_pp2_iter1 = (ap_condition_pp2_exit_iter0_state16.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp2_iter1 = ap_enable_reg_pp2_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp2_iter2 = ap_enable_reg_pp2_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
                    esl_seteq<1,1,1>(m00_axi_AWREADY.read(), ap_const_logic_1))) {
            ap_enable_reg_pp2_iter2 = ap_const_logic_0;
        }
    }
    ap_rst_n_inv = ap_rst_reg_1.read();
    ap_rst_reg_1 = ap_rst_reg_2.read();
    ap_rst_reg_2 =  (sc_logic) (~ap_rst_n.read());
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        i_0_reg_184 = ap_const_lv13_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln58_fu_243_p2.read()))) {
        i_0_reg_184 = i_fu_249_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln55_reg_291.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        phi_ln55_reg_172 = add_ln55_reg_295.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        phi_ln55_reg_172 = ap_const_lv13_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
         esl_seteq<1,1,1>(m00_axi_AWREADY.read(), ap_const_logic_1))) {
        phi_ln63_reg_195 = ap_const_lv13_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln63_fu_267_p2.read()))) {
        phi_ln63_reg_195 = add_ln63_fu_273_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        add_ln55_reg_295 = add_ln55_fu_232_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln55_reg_291 = icmp_ln55_fu_226_p2.read();
        icmp_ln55_reg_291_pp0_iter1_reg = icmp_ln55_reg_291.read();
        phi_ln55_reg_172_pp0_iter1_reg = phi_ln55_reg_172.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln58_reg_305 = icmp_ln58_fu_243_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln63_reg_324 = icmp_ln63_fu_267_p2.read();
        icmp_ln63_reg_324_pp2_iter1_reg = icmp_ln63_reg_324.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(icmp_ln55_reg_291.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m00_axi_addr_read_reg_300 = m00_axi_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        m00_axi_addr_reg_284 = empty_fu_216_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln63_reg_324.read()))) {
        m00_axi_output_buffer_load_reg_338 = m00_axi_output_buffer_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln58_fu_243_p2.read()))) {
        zext_ln59_reg_314 = zext_ln59_fu_255_p1.read();
    }
}

void cceip_kernel::thread_add_ln55_fu_232_p2() {
    add_ln55_fu_232_p2 = (!ap_phi_mux_phi_ln55_phi_fu_176_p4.read().is_01() || !ap_const_lv13_1.is_01())? sc_lv<13>(): (sc_biguint<13>(ap_phi_mux_phi_ln55_phi_fu_176_p4.read()) + sc_biguint<13>(ap_const_lv13_1));
}

void cceip_kernel::thread_add_ln63_fu_273_p2() {
    add_ln63_fu_273_p2 = (!phi_ln63_reg_195.read().is_01() || !ap_const_lv13_1.is_01())? sc_lv<13>(): (sc_biguint<13>(phi_ln63_reg_195.read()) + sc_biguint<13>(ap_const_lv13_1));
}

void cceip_kernel::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[8];
}

void cceip_kernel::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[10];
}

void cceip_kernel::thread_ap_CS_fsm_pp2_stage0() {
    ap_CS_fsm_pp2_stage0 = ap_CS_fsm.read()[12];
}

void cceip_kernel::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void cceip_kernel::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[9];
}

void cceip_kernel::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[11];
}

void cceip_kernel::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void cceip_kernel::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[17];
}

void cceip_kernel::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void cceip_kernel::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cceip_kernel::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln55_reg_291.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, m00_axi_RVALID.read()));
}

void cceip_kernel::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln55_reg_291.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, m00_axi_RVALID.read()));
}

void cceip_kernel::thread_ap_block_pp1_stage0() {
    ap_block_pp1_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cceip_kernel::thread_ap_block_pp1_stage0_11001() {
    ap_block_pp1_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cceip_kernel::thread_ap_block_pp1_stage0_subdone() {
    ap_block_pp1_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cceip_kernel::thread_ap_block_pp2_stage0() {
    ap_block_pp2_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cceip_kernel::thread_ap_block_pp2_stage0_01001() {
    ap_block_pp2_stage0_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cceip_kernel::thread_ap_block_pp2_stage0_11001() {
    ap_block_pp2_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter2.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state18_io.read()));
}

void cceip_kernel::thread_ap_block_pp2_stage0_subdone() {
    ap_block_pp2_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter2.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state18_io.read()));
}

void cceip_kernel::thread_ap_block_state10_pp0_stage0_iter1() {
    ap_block_state10_pp0_stage0_iter1 = (esl_seteq<1,1,1>(icmp_ln55_reg_291.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, m00_axi_RVALID.read()));
}

void cceip_kernel::thread_ap_block_state11_pp0_stage0_iter2() {
    ap_block_state11_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cceip_kernel::thread_ap_block_state13_pp1_stage0_iter0() {
    ap_block_state13_pp1_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cceip_kernel::thread_ap_block_state14_pp1_stage0_iter1() {
    ap_block_state14_pp1_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cceip_kernel::thread_ap_block_state16_pp2_stage0_iter0() {
    ap_block_state16_pp2_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cceip_kernel::thread_ap_block_state17_pp2_stage0_iter1() {
    ap_block_state17_pp2_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cceip_kernel::thread_ap_block_state18_io() {
    ap_block_state18_io = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln63_reg_324_pp2_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m00_axi_WREADY.read()));
}

void cceip_kernel::thread_ap_block_state18_pp2_stage0_iter2() {
    ap_block_state18_pp2_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cceip_kernel::thread_ap_block_state9_pp0_stage0_iter0() {
    ap_block_state9_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cceip_kernel::thread_ap_condition_pp0_exit_iter0_state9() {
    if (esl_seteq<1,1,1>(icmp_ln55_fu_226_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state9 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state9 = ap_const_logic_0;
    }
}

void cceip_kernel::thread_ap_condition_pp1_exit_iter0_state13() {
    if (esl_seteq<1,1,1>(icmp_ln58_fu_243_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp1_exit_iter0_state13 = ap_const_logic_1;
    } else {
        ap_condition_pp1_exit_iter0_state13 = ap_const_logic_0;
    }
}

void cceip_kernel::thread_ap_condition_pp2_exit_iter0_state16() {
    if (esl_seteq<1,1,1>(icmp_ln63_fu_267_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp2_exit_iter0_state16 = ap_const_logic_1;
    } else {
        ap_condition_pp2_exit_iter0_state16 = ap_const_logic_0;
    }
}

void cceip_kernel::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
         esl_seteq<1,1,1>(m00_axi_BVALID.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void cceip_kernel::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void cceip_kernel::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void cceip_kernel::thread_ap_enable_pp2() {
    ap_enable_pp2 = (ap_idle_pp2.read() ^ ap_const_logic_1);
}

void cceip_kernel::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void cceip_kernel::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void cceip_kernel::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void cceip_kernel::thread_ap_idle_pp2() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp2_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp2_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp2_iter2.read()))) {
        ap_idle_pp2 = ap_const_logic_1;
    } else {
        ap_idle_pp2 = ap_const_logic_0;
    }
}

void cceip_kernel::thread_ap_phi_mux_phi_ln55_phi_fu_176_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln55_reg_291.read(), ap_const_lv1_0))) {
        ap_phi_mux_phi_ln55_phi_fu_176_p4 = add_ln55_reg_295.read();
    } else {
        ap_phi_mux_phi_ln55_phi_fu_176_p4 = phi_ln55_reg_172.read();
    }
}

void cceip_kernel::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
         esl_seteq<1,1,1>(m00_axi_BVALID.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void cceip_kernel::thread_empty_fu_216_p1() {
    empty_fu_216_p1 = esl_zext<64,62>(input_addr1_fu_206_p4.read());
}

void cceip_kernel::thread_i_fu_249_p2() {
    i_fu_249_p2 = (!i_0_reg_184.read().is_01() || !ap_const_lv13_1.is_01())? sc_lv<13>(): (sc_biguint<13>(i_0_reg_184.read()) + sc_biguint<13>(ap_const_lv13_1));
}

void cceip_kernel::thread_icmp_ln55_fu_226_p2() {
    icmp_ln55_fu_226_p2 = (!ap_phi_mux_phi_ln55_phi_fu_176_p4.read().is_01() || !ap_const_lv13_1000.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_phi_ln55_phi_fu_176_p4.read() == ap_const_lv13_1000);
}

void cceip_kernel::thread_icmp_ln58_fu_243_p2() {
    icmp_ln58_fu_243_p2 = (!i_0_reg_184.read().is_01() || !ap_const_lv13_1000.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_184.read() == ap_const_lv13_1000);
}

void cceip_kernel::thread_icmp_ln63_fu_267_p2() {
    icmp_ln63_fu_267_p2 = (!phi_ln63_reg_195.read().is_01() || !ap_const_lv13_1000.is_01())? sc_lv<1>(): sc_lv<1>(phi_ln63_reg_195.read() == ap_const_lv13_1000);
}

void cceip_kernel::thread_input_addr1_fu_206_p4() {
    input_addr1_fu_206_p4 = input_addr.read().range(63, 2);
}

void cceip_kernel::thread_m00_axi_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(m00_axi_ARREADY.read(), ap_const_logic_1))) {
        m00_axi_ARVALID = ap_const_logic_1;
    } else {
        m00_axi_ARVALID = ap_const_logic_0;
    }
}

void cceip_kernel::thread_m00_axi_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
         esl_seteq<1,1,1>(m00_axi_AWREADY.read(), ap_const_logic_1))) {
        m00_axi_AWVALID = ap_const_logic_1;
    } else {
        m00_axi_AWVALID = ap_const_logic_0;
    }
}

void cceip_kernel::thread_m00_axi_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
         esl_seteq<1,1,1>(m00_axi_BVALID.read(), ap_const_logic_1))) {
        m00_axi_BREADY = ap_const_logic_1;
    } else {
        m00_axi_BREADY = ap_const_logic_0;
    }
}

void cceip_kernel::thread_m00_axi_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln55_reg_291.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m00_axi_RREADY = ap_const_logic_1;
    } else {
        m00_axi_RREADY = ap_const_logic_0;
    }
}

void cceip_kernel::thread_m00_axi_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln63_reg_324_pp2_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0))) {
        m00_axi_WVALID = ap_const_logic_1;
    } else {
        m00_axi_WVALID = ap_const_logic_0;
    }
}

void cceip_kernel::thread_m00_axi_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        m00_axi_blk_n_AR = m_axi_m00_axi_ARREADY.read();
    } else {
        m00_axi_blk_n_AR = ap_const_logic_1;
    }
}

void cceip_kernel::thread_m00_axi_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        m00_axi_blk_n_AW = m_axi_m00_axi_AWREADY.read();
    } else {
        m00_axi_blk_n_AW = ap_const_logic_1;
    }
}

void cceip_kernel::thread_m00_axi_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        m00_axi_blk_n_B = m_axi_m00_axi_BVALID.read();
    } else {
        m00_axi_blk_n_B = ap_const_logic_1;
    }
}

void cceip_kernel::thread_m00_axi_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln55_reg_291.read(), ap_const_lv1_0))) {
        m00_axi_blk_n_R = m_axi_m00_axi_RVALID.read();
    } else {
        m00_axi_blk_n_R = ap_const_logic_1;
    }
}

void cceip_kernel::thread_m00_axi_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln63_reg_324_pp2_iter1_reg.read()))) {
        m00_axi_blk_n_W = m_axi_m00_axi_WREADY.read();
    } else {
        m00_axi_blk_n_W = ap_const_logic_1;
    }
}

void cceip_kernel::thread_m00_axi_input_buffer_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0))) {
        m00_axi_input_buffer_address0 =  (sc_lv<13>) (zext_ln59_fu_255_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
        m00_axi_input_buffer_address0 =  (sc_lv<13>) (zext_ln55_fu_238_p1.read());
    } else {
        m00_axi_input_buffer_address0 = "XXXXXXXXXXXXX";
    }
}

void cceip_kernel::thread_m00_axi_input_buffer_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())))) {
        m00_axi_input_buffer_ce0 = ap_const_logic_1;
    } else {
        m00_axi_input_buffer_ce0 = ap_const_logic_0;
    }
}

void cceip_kernel::thread_m00_axi_input_buffer_we0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln55_reg_291_pp0_iter1_reg.read()))) {
        m00_axi_input_buffer_we0 = ap_const_logic_1;
    } else {
        m00_axi_input_buffer_we0 = ap_const_logic_0;
    }
}

void cceip_kernel::thread_m00_axi_output_buffer_address0() {
    if ((esl_seteq<1,1,1>(ap_block_pp2_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()))) {
        m00_axi_output_buffer_address0 =  (sc_lv<13>) (zext_ln63_fu_279_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()))) {
        m00_axi_output_buffer_address0 =  (sc_lv<13>) (zext_ln59_reg_314.read());
    } else {
        m00_axi_output_buffer_address0 = "XXXXXXXXXXXXX";
    }
}

void cceip_kernel::thread_m00_axi_output_buffer_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read())))) {
        m00_axi_output_buffer_ce0 = ap_const_logic_1;
    } else {
        m00_axi_output_buffer_ce0 = ap_const_logic_0;
    }
}

void cceip_kernel::thread_m00_axi_output_buffer_d0() {
    m00_axi_output_buffer_d0 = (!m00_axi_input_buffer_q0.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(m00_axi_input_buffer_q0.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void cceip_kernel::thread_m00_axi_output_buffer_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln58_reg_305.read()))) {
        m00_axi_output_buffer_we0 = ap_const_logic_1;
    } else {
        m00_axi_output_buffer_we0 = ap_const_logic_0;
    }
}

void cceip_kernel::thread_zext_ln55_fu_238_p1() {
    zext_ln55_fu_238_p1 = esl_zext<64,13>(phi_ln55_reg_172_pp0_iter1_reg.read());
}

void cceip_kernel::thread_zext_ln59_fu_255_p1() {
    zext_ln59_fu_255_p1 = esl_zext<64,13>(i_0_reg_184.read());
}

void cceip_kernel::thread_zext_ln63_fu_279_p1() {
    zext_ln63_fu_279_p1 = esl_zext<64,13>(phi_ln63_reg_195.read());
}

void cceip_kernel::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(m00_axi_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 256 : 
            if ((!(esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln55_fu_226_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(icmp_ln55_fu_226_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            break;
        case 1024 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln58_fu_243_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln58_fu_243_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(m00_axi_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 4096 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp2_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln63_fu_267_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp2_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp2_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(icmp_ln63_fu_267_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp2_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state19;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            }
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 131072 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && esl_seteq<1,1,1>(m00_axi_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state23;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<18>) ("XXXXXXXXXXXXXXXXXX");
            break;
    }
}

void cceip_kernel::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_m00_axi_AWVALID\" :  \"" << m_axi_m00_axi_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_m00_axi_AWREADY\" :  \"" << m_axi_m00_axi_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_AWADDR\" :  \"" << m_axi_m00_axi_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_AWID\" :  \"" << m_axi_m00_axi_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_AWLEN\" :  \"" << m_axi_m00_axi_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_AWSIZE\" :  \"" << m_axi_m00_axi_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_AWBURST\" :  \"" << m_axi_m00_axi_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_AWLOCK\" :  \"" << m_axi_m00_axi_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_AWCACHE\" :  \"" << m_axi_m00_axi_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_AWPROT\" :  \"" << m_axi_m00_axi_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_AWQOS\" :  \"" << m_axi_m00_axi_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_AWREGION\" :  \"" << m_axi_m00_axi_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_AWUSER\" :  \"" << m_axi_m00_axi_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_WVALID\" :  \"" << m_axi_m00_axi_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_m00_axi_WREADY\" :  \"" << m_axi_m00_axi_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_WDATA\" :  \"" << m_axi_m00_axi_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_WSTRB\" :  \"" << m_axi_m00_axi_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_WLAST\" :  \"" << m_axi_m00_axi_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_WID\" :  \"" << m_axi_m00_axi_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_WUSER\" :  \"" << m_axi_m00_axi_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_ARVALID\" :  \"" << m_axi_m00_axi_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_m00_axi_ARREADY\" :  \"" << m_axi_m00_axi_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_ARADDR\" :  \"" << m_axi_m00_axi_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_ARID\" :  \"" << m_axi_m00_axi_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_ARLEN\" :  \"" << m_axi_m00_axi_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_ARSIZE\" :  \"" << m_axi_m00_axi_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_ARBURST\" :  \"" << m_axi_m00_axi_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_ARLOCK\" :  \"" << m_axi_m00_axi_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_ARCACHE\" :  \"" << m_axi_m00_axi_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_ARPROT\" :  \"" << m_axi_m00_axi_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_ARQOS\" :  \"" << m_axi_m00_axi_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_ARREGION\" :  \"" << m_axi_m00_axi_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_ARUSER\" :  \"" << m_axi_m00_axi_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_m00_axi_RVALID\" :  \"" << m_axi_m00_axi_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_RREADY\" :  \"" << m_axi_m00_axi_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_m00_axi_RDATA\" :  \"" << m_axi_m00_axi_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_m00_axi_RLAST\" :  \"" << m_axi_m00_axi_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_m00_axi_RID\" :  \"" << m_axi_m00_axi_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_m00_axi_RUSER\" :  \"" << m_axi_m00_axi_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_m00_axi_RRESP\" :  \"" << m_axi_m00_axi_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_m00_axi_BVALID\" :  \"" << m_axi_m00_axi_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_m00_axi_BREADY\" :  \"" << m_axi_m00_axi_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_m00_axi_BRESP\" :  \"" << m_axi_m00_axi_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_m00_axi_BID\" :  \"" << m_axi_m00_axi_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_m00_axi_BUSER\" :  \"" << m_axi_m00_axi_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWVALID\" :  \"" << s_axi_control_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_AWREADY\" :  \"" << s_axi_control_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWADDR\" :  \"" << s_axi_control_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WVALID\" :  \"" << s_axi_control_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_WREADY\" :  \"" << s_axi_control_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WDATA\" :  \"" << s_axi_control_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WSTRB\" :  \"" << s_axi_control_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARVALID\" :  \"" << s_axi_control_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_ARREADY\" :  \"" << s_axi_control_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARADDR\" :  \"" << s_axi_control_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RVALID\" :  \"" << s_axi_control_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_RREADY\" :  \"" << s_axi_control_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RDATA\" :  \"" << s_axi_control_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RRESP\" :  \"" << s_axi_control_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BVALID\" :  \"" << s_axi_control_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_BREADY\" :  \"" << s_axi_control_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BRESP\" :  \"" << s_axi_control_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

